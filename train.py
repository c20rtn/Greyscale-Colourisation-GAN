{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_images,train_labels),(test_images,test_labels) = tf.keras.datasets.mnist.load_data()\n",
    "\n",
    "train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')\n",
    "train_images = (train_images - 127.5) / 127.5 # Normalize the images to [-1, 1]\n",
    "\n",
    "BUFFER_SIZE = 60000\n",
    "BATCH_SIZE = 256\n",
    "\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_images,train_labels)).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_generator_model():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(tf.keras.layers.Dense(7*7*256, use_bias=False, input_shape=(100,)))\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "      \n",
    "    model.add(tf.keras.layers.Reshape((7, 7, 256)))\n",
    "    assert model.output_shape == (None, 7, 7, 256) # Note: None is the batch size\n",
    "    \n",
    "    model.add(tf.keras.layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))\n",
    "    assert model.output_shape == (None, 7, 7, 128)  \n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))\n",
    "    assert model.output_shape == (None, 14, 14, 64)    \n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n",
    "    assert model.output_shape == (None, 28, 28, 1)\n",
    "  \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_discriminator_model():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(tf.keras.layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same'))\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.Dropout(0.3))\n",
    "      \n",
    "    model.add(tf.keras.layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.Dropout(0.3))\n",
    "       \n",
    "    model.add(tf.keras.layers.Flatten())\n",
    "    model.add(tf.keras.layers.Dense(1))\n",
    "     \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "generator = make_generator_model()\n",
    "discriminator = make_discriminator_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator_loss(generated_output):\n",
    "    return tf.nn.sigmoid_cross_entropy_with_logits(labels = tf.ones_like(generated_output), logits = generated_output)\n",
    "\n",
    "\n",
    "def discriminator_loss(real_output, generated_output):\n",
    "    # [1,1,...,1] with real output since it is true and we want our generated examples to look like it\n",
    "    real_loss = tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(real_output), logits=real_output)\n",
    "\n",
    "    # [0,0,...,0] with generated images since they are fake\n",
    "    generated_loss = tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(generated_output), logits=generated_output)\n",
    "\n",
    "    total_loss = real_loss + generated_loss\n",
    "\n",
    "    return total_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "generator_optimizer = tf.optimizers.Adam(1e-4)\n",
    "discriminator_optimizer = tf.optimizers.Adam(1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "EPOCHS = 50\n",
    "noise_dim = 100\n",
    "num_examples_to_generate = 16\n",
    "\n",
    "# We'll re-use this random vector used to seed the generator so\n",
    "# it will be easier to see the improvement over time.\n",
    "random_vector_for_generation = tf.random.normal([num_examples_to_generate,\n",
    "                                                 noise_dim])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_step(images,old_gen_loss,old_disc_loss):\n",
    "   # generating noise from a normal distribution\n",
    "    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n",
    "      \n",
    "    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n",
    "        generated_images = generator(noise, training=True)\n",
    "        real_output = discriminator(images[0], training=True)\n",
    "        generated_output = discriminator(generated_images, training=True)\n",
    "\n",
    "        gen_loss = generator_loss(generated_output)\n",
    "        disc_loss = discriminator_loss(real_output, generated_output)\n",
    "\n",
    "\n",
    "    gradients_of_generator = gen_tape.gradient(gen_loss, generator.variables)\n",
    "    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n",
    "        \n",
    "    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.variables)\n",
    "    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(dataset, epochs):  \n",
    "    for epoch in range(epochs):\n",
    "        start = time.time()\n",
    "        gen_loss = 500\n",
    "        disc_loss = 500\n",
    "        for images in dataset:\n",
    "            gen_loss,disc_loss = train_step(images,gen_loss,disc_loss)\n",
    "\n",
    "        display.clear_output(wait=True)\n",
    "        generate_and_save_images(generator,\n",
    "                                   epoch + 1,\n",
    "                                   random_vector_for_generation)\n",
    "\n",
    "        # saving (checkpoint) the model every 15 epochs\n",
    "        if (epoch + 1) % 15 == 0:\n",
    "            checkpoint.save(file_prefix = checkpoint_prefix)\n",
    "\n",
    "        print ('Time taken for epoch {} is {} sec'.format(epoch + 1,\n",
    "                                                      time.time()-start))\n",
    "    # generating after the final epoch\n",
    "    display.clear_output(wait=True)\n",
    "    generate_and_save_images(generator,\n",
    "                           epochs,\n",
    "                           random_vector_for_generation)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "generator 0.751045\n",
      "discriminator 1.444514\n",
      "generator 0.7522331\n",
      "discriminator 1.4140058\n",
      "generator 0.74551046\n",
      "discriminator 1.3779311\n",
      "generator 0.71048725\n",
      "discriminator 1.4719393\n",
      "generator 0.70824456\n",
      "discriminator 1.4232916\n",
      "generator 0.68237066\n",
      "discriminator 1.4574437\n",
      "generator 0.72727126\n",
      "discriminator 1.4185343\n",
      "generator 0.7474588\n",
      "discriminator 1.4228809\n",
      "generator 0.71331996\n",
      "discriminator 1.4982717\n",
      "generator 0.72656816\n",
      "discriminator 1.4567927\n",
      "generator 0.7380261\n",
      "discriminator 1.3682688\n",
      "generator 0.6931046\n",
      "discriminator 1.4559752\n",
      "generator 0.6744834\n",
      "discriminator 1.4638042\n",
      "generator 0.6864778\n",
      "discriminator 1.446059\n",
      "generator 0.68873775\n",
      "discriminator 1.4719825\n",
      "generator 0.71523774\n",
      "discriminator 1.4512596\n",
      "generator 0.7172215\n",
      "discriminator 1.4842293\n",
      "generator 0.68879247\n",
      "discriminator 1.4817054\n",
      "generator 0.7131722\n",
      "discriminator 1.4312637\n",
      "generator 0.72329986\n",
      "discriminator 1.429595\n",
      "generator 0.73128843\n",
      "discriminator 1.4236741\n",
      "generator 0.67851925\n",
      "discriminator 1.4510993\n",
      "generator 0.7190745\n",
      "discriminator 1.3942366\n",
      "generator 0.74540186\n",
      "discriminator 1.4371759\n",
      "generator 0.7473823\n",
      "discriminator 1.408835\n",
      "generator 0.72428197\n",
      "discriminator 1.4564788\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-293-d152560ca122>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_dataset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEPOCHS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-206-6e265939199a>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(dataset, epochs)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mdisc_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m500\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mimages\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m             \u001b[0mgen_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdisc_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_step\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgen_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdisc_loss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-205-08260f295db6>\u001b[0m in \u001b[0;36mtrain_step\u001b[0;34m(images, old_gen_loss, old_disc_loss)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgen_tape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGradientTape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mdisc_tape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0mgenerated_images\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenerator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m         \u001b[0mreal_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mgenerated_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerated_images\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    658\u001b[0m           with base_layer_utils.autocast_context_manager(\n\u001b[1;32m    659\u001b[0m               input_list, self._mixed_precision_policy.should_cast_variables):\n\u001b[0;32m--> 660\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    661\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_activity_regularization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    662\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_mask_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprevious_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/sequential.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, inputs, training, mask)\u001b[0m\n\u001b[1;32m    240\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuilt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_init_graph_network\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mSequential\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtraining\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minputs\u001b[0m  \u001b[0;31m# handle the corner case where self.layers is empty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, inputs, training, mask)\u001b[0m\n\u001b[1;32m    868\u001b[0m                                 ' implement a `call` method.')\n\u001b[1;32m    869\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 870\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_internal_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtraining\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    871\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcompute_output_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/network.py\u001b[0m in \u001b[0;36m_run_internal_graph\u001b[0;34m(self, inputs, training, mask)\u001b[0m\n\u001b[1;32m   1009\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1010\u001b[0m           \u001b[0;31m# Compute outputs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1011\u001b[0;31m           \u001b[0moutput_tensors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcomputed_tensors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1013\u001b[0m           \u001b[0;31m# Update tensor_dict.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    658\u001b[0m           with base_layer_utils.autocast_context_manager(\n\u001b[1;32m    659\u001b[0m               input_list, self._mixed_precision_policy.should_cast_variables):\n\u001b[0;32m--> 660\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    661\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_activity_regularization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    662\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_mask_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprevious_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/layers/convolutional.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m    819\u001b[0m         \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    820\u001b[0m         \u001b[0mdata_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 821\u001b[0;31m         dilation_rate=self.dilation_rate)\n\u001b[0m\u001b[1;32m    822\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    823\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/backend.py\u001b[0m in \u001b[0;36mconv2d_transpose\u001b[0;34m(x, kernel, output_shape, strides, padding, data_format, dilation_rate)\u001b[0m\n\u001b[1;32m   4354\u001b[0m     x = nn.conv2d_transpose(x, kernel, output_shape, strides,\n\u001b[1;32m   4355\u001b[0m                             \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4356\u001b[0;31m                             data_format=tf_data_format)\n\u001b[0m\u001b[1;32m   4357\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4358\u001b[0m     \u001b[0;32massert\u001b[0m \u001b[0mdilation_rate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mdilation_rate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/nn_ops.py\u001b[0m in \u001b[0;36mconv2d_transpose\u001b[0;34m(value, filter, output_shape, strides, padding, data_format, name, input, filters, dilations)\u001b[0m\n\u001b[1;32m   2143\u001b[0m         \u001b[0mdata_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2144\u001b[0m         \u001b[0mdilations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdilations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2145\u001b[0;31m         name=name)\n\u001b[0m\u001b[1;32m   2146\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/nn_ops.py\u001b[0m in \u001b[0;36mconv2d_transpose_v2\u001b[0;34m(input, filters, output_shape, strides, padding, data_format, dilations, name)\u001b[0m\n\u001b[1;32m   2214\u001b[0m         \u001b[0mdata_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2215\u001b[0m         \u001b[0mdilations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdilations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2216\u001b[0;31m         name=name)\n\u001b[0m\u001b[1;32m   2217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_nn_ops.py\u001b[0m in \u001b[0;36mconv2d_backprop_input\u001b[0;34m(input_sizes, filter, out_backprop, strides, padding, use_cudnn_on_gpu, explicit_paddings, data_format, dilations, name)\u001b[0m\n\u001b[1;32m   1354\u001b[0m         \u001b[0;34m\"use_cudnn_on_gpu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_cudnn_on_gpu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"padding\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1355\u001b[0m         \u001b[0;34m\"explicit_paddings\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexplicit_paddings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"data_format\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1356\u001b[0;31m         \"dilations\", dilations)\n\u001b[0m\u001b[1;32m   1357\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1358\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "train(train_dataset, EPOCHS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-5af5608cc45e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrand\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m28\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m28\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.imshow(generator(np.random.rand(1,100)).numpy().reshape(28,28))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'train_data' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-274-183379bcee5f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mtrain_images_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_labels_samples\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtrain_data\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'train_data' is not defined"
     ]
    }
   ],
   "source": [
    "for train_images_samples, train_labels_samples in train_data:\n",
    "    print(train_labels)\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Let's make the discriminator network. It's the same as a normal network except this one just tells us whether an image is fake or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_discriminator_model():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(tf.keras.layers.Conv2D(7,(3,3),padding=\"same\",input_shape=(28,28,1),activation=\"relu\"))\n",
    "    model.add(tf.keras.layers.Flatten())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "    model.add(tf.keras.layers.Dense(50,activation=\"relu\"))\n",
    "    model.add(tf.keras.layers.Dense(1))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_classifier = make_discriminator_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "discriminator_model = make_discriminator_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_discriminator_loss(real_predictions,fake_predictions):\n",
    "    real_predictions = tf.sigmoid(real_predictions)\n",
    "    fake_predictions = tf.sigmoid(fake_predictions)\n",
    "    real_loss = tf.losses.binary_crossentropy(tf.ones_like(real_predictions),real_predictions)\n",
    "    fake_loss = tf.losses.binary_crossentropy(tf.zeros_like(fake_predictions),fake_predictions)\n",
    "    return real_loss+ fake_loss\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=398447, shape=(), dtype=float32, numpy=1.0064085>"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_discriminator_loss([1,1,1,1.],[0.,0,0,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "discriminator_optimizer = tf.optimizers.Adam(1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train():\n",
    "    for train_images,_ in train_data:\n",
    "        return train_images\n",
    "        with tf.GradientTape() as tape:\n",
    "            train_images = tf.reshape(train_images,(500,28,28,1))\n",
    "            train_images = (tf.cast(train_images,dtype=tf.dtypes.float32)-127.5)/127.5\n",
    "            train_images = tf.reshape(train_images,(500,28,28,1))\n",
    "            fake_images = ((2*np.random.rand(500,28,28,1))-1)\n",
    "            real_predictions = discriminator_model(train_images)\n",
    "            fake_predictions = discriminator_model(fake_images)\n",
    "            loss = get_discriminator_loss(real_predictions,fake_predictions)\n",
    "            grad = tape.gradient(loss,discriminator_model.variables)\n",
    "            discriminator_optimizer.apply_gradients(zip(grad,discriminator_model.variables))\n",
    "            generator_optimizer.apply_gradients()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=1271281, shape=(500, 28, 28), dtype=uint8, numpy=\n",
       "array([[[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]],\n",
       "\n",
       "       [[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]]], dtype=uint8)>"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=1271289, shape=(500, 28, 28, 1), dtype=uint8, numpy=\n",
       "array([[[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]],\n",
       "\n",
       "\n",
       "       [[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]],\n",
       "\n",
       "\n",
       "       [[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]],\n",
       "\n",
       "\n",
       "       ...,\n",
       "\n",
       "\n",
       "       [[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]],\n",
       "\n",
       "\n",
       "       [[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]],\n",
       "\n",
       "\n",
       "       [[[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]],\n",
       "\n",
       "        [[0],\n",
       "         [0],\n",
       "         [0],\n",
       "         ...,\n",
       "         [0],\n",
       "         [0],\n",
       "         [0]]]], dtype=uint8)>"
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.reshape(A,(-1,28,28,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=230, shape=(10, 1), dtype=float32, numpy=\n",
       "array([[-0.68043375],\n",
       "       [-0.7048673 ],\n",
       "       [-0.8185603 ],\n",
       "       [-0.11383929],\n",
       "       [-0.41929972],\n",
       "       [-0.28414232],\n",
       "       [-0.9610402 ],\n",
       "       [-0.5036322 ],\n",
       "       [-0.09535562],\n",
       "       [-0.985209  ]], dtype=float32)>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discriminator_model(np.random.randn(10,28,28,1).astype(\"float32\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now we will make a generator so that we can make the numbers. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_generator_model():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(tf.keras.layers.Dense(7*7*256,input_shape=(100,)))\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.Reshape((7,7,256)))\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(128,(3,3),padding=\"same\"))\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(64,(3,3),strides=(2,2),padding=\"same\"))\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(1,(3,3),strides=(2,2),padding=\"same\",activation=\"tanh\"))\n",
    "    \n",
    "    return model\n",
    "              \n",
    "              "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_generator_model():\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(tf.keras.layers.Dense(7*7*256, use_bias=False, input_shape=(100,)))\n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "      \n",
    "    model.add(tf.keras.layers.Reshape((7, 7, 256)))\n",
    "    assert model.output_shape == (None, 7, 7, 256) # Note: None is the batch size\n",
    "    \n",
    "    model.add(tf.keras.layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))\n",
    "    assert model.output_shape == (None, 7, 7, 128)  \n",
    "    model.add(tf.keras.layers.BatchNormalization(trainable=False))\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))\n",
    "    assert model.output_shape == (None, 14, 14, 64)    \n",
    "    model.add(tf.keras.layers.BatchNormalization())\n",
    "    model.add(tf.keras.layers.LeakyReLU())\n",
    "\n",
    "    model.add(tf.keras.layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n",
    "    assert model.output_shape == (None, 28, 28, 1)\n",
    "  \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_generator_loss(fake_predictions):\n",
    "    fake_predictions = tf.sigmoid(fake_predictions)\n",
    "    fake_loss = tf.losses.binary_crossentropy(tf.ones_like(fake_predictions),fake_predictions)\n",
    "    return fake_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "generator = make_generator_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "generator_optimizer = tf.optimizers.Adam(1e-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train():\n",
    "    for train_images_samples,_ in train_data:\n",
    "        with tf.GradientTape() as disc_tape, tf.GradientTape() as gen_tape:\n",
    "            train_images_samples = tf.reshape(train_images_samples,(500,28,28,1))\n",
    "            train_images_samples = (tf.cast(train_images_samples,dtype=tf.dtypes.float32)-127.5)/127.5\n",
    "            fake_images = generator(np.random.rand(500,100))\n",
    "            real_predictions = discriminator_model(train_images_samples)\n",
    "            fake_predictions = discriminator_model(fake_images)\n",
    "            disc_loss = get_discriminator_loss(real_predictions,fake_predictions)\n",
    "            disc_grad = disc_tape.gradient(disc_loss,discriminator_model.variables)\n",
    "            gen_loss = get_generator_loss(fake_predictions)\n",
    "            gen_grad = gen_tape.gradient(gen_loss,generator.variables)\n",
    "            discriminator_optimizer.apply_gradients(zip(disc_grad,discriminator_model.variables))\n",
    "            generator_optimizer.apply_gradients(zip(gen_grad,generator.variables))\n",
    "            print(disc_grad,discriminator_model.variables)\n",
    "#             print(np.sum(gen_loss.))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0330 17:01:40.042024 4738405824 optimizer_v2.py:928] Gradients does not exist for variables ['batch_normalization_v2_51/moving_mean:0', 'batch_normalization_v2_51/moving_variance:0', 'batch_normalization_v2_52/moving_mean:0', 'batch_normalization_v2_52/moving_variance:0', 'batch_normalization_v2_53/moving_mean:0', 'batch_normalization_v2_53/moving_variance:0'] when minimizing the loss.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<tf.Tensor: id=1297511, shape=(3, 3, 1, 7), dtype=float32, numpy=\n",
      "array([[[[-42.2797    ,  75.248856  ,   0.5242444 ,  21.720259  ,\n",
      "          -18.221092  ,  12.662617  ,  -5.238023  ]],\n",
      "\n",
      "        [[-40.336624  ,  38.55473   ,  -1.8076478 ,  20.861574  ,\n",
      "          -15.070143  ,  40.483967  ,  -8.335267  ]],\n",
      "\n",
      "        [[-36.10094   ,  42.173096  ,   2.0886557 ,  -7.611914  ,\n",
      "           -8.598877  ,  30.783806  , -11.095931  ]]],\n",
      "\n",
      "\n",
      "       [[[ -2.0658157 ,  61.961243  ,   0.78242856,  29.854778  ,\n",
      "          -14.348753  ,  11.301836  ,  -0.6633976 ]],\n",
      "\n",
      "        [[ -4.6981597 ,  29.646677  ,  -3.8763342 ,  30.750751  ,\n",
      "           -9.492299  ,  29.831837  , -10.700534  ]],\n",
      "\n",
      "        [[-12.951856  ,  40.01957   ,  -0.20743245,   2.6543212 ,\n",
      "            0.57461536,  21.46692   ,  -9.410068  ]]],\n",
      "\n",
      "\n",
      "       [[[ 20.7448    ,   9.35921   ,  -6.386487  ,  35.23032   ,\n",
      "            0.840677  ,   6.3119454 ,  -0.11352646]],\n",
      "\n",
      "        [[ 18.481428  , -19.585125  ,  -8.41361   ,  35.937366  ,\n",
      "            5.3306723 ,  23.51479   ,  -4.470872  ]],\n",
      "\n",
      "        [[  7.673092  ,  -0.2602374 ,  -0.6734618 ,   6.916651  ,\n",
      "            5.3348727 ,  16.456503  ,  -2.4577568 ]]]], dtype=float32)>, <tf.Tensor: id=1297512, shape=(7,), dtype=float32, numpy=\n",
      "array([  33.175453  , -125.70592   ,  -10.764982  ,  -27.076557  ,\n",
      "          0.26372147,  130.52654   ,   83.37505   ], dtype=float32)>, <tf.Tensor: id=1297513, shape=(5488, 50), dtype=float32, numpy=\n",
      "array([[-6.19564581e+00,  1.98890438e+01, -1.70490718e+00, ...,\n",
      "         7.85534716e+00, -1.08677134e-01,  1.81455612e+01],\n",
      "       [-3.40366602e+00,  1.09246016e+01, -9.36453342e-01, ...,\n",
      "         4.31445026e+00, -5.96839674e-02,  9.96621895e+00],\n",
      "       [ 1.29906839e-04, -1.31953828e-04,  1.01720452e-05, ...,\n",
      "         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],\n",
      "       ...,\n",
      "       [-9.50398266e-01,  3.05078459e+00, -2.61518687e-01, ...,\n",
      "         1.20490599e+00, -1.66731998e-02,  2.78328824e+00],\n",
      "       [ 3.84929031e-02, -3.88326384e-02,  2.90285377e-03, ...,\n",
      "         0.00000000e+00,  4.44749428e-04,  0.00000000e+00],\n",
      "       [ 2.57896399e-03, -2.61960179e-03,  1.94266031e-04, ...,\n",
      "         0.00000000e+00,  0.00000000e+00,  0.00000000e+00]], dtype=float32)>, <tf.Tensor: id=1297514, shape=(50,), dtype=float32, numpy=\n",
      "array([ 3.44758797e+01, -7.29758453e+00,  3.64291668e-02,  2.21296883e+01,\n",
      "       -1.59962254e+01,  4.44337273e+01, -3.40683212e+01, -1.75294232e+00,\n",
      "       -1.54517994e+01,  1.29010797e+00, -2.95071411e+00,  3.69335175e+00,\n",
      "       -4.07197952e+01,  2.99622688e+01, -1.71053457e+00,  4.77228546e+00,\n",
      "        5.12475052e+01,  1.75240288e+01,  6.24305725e+00,  2.52902746e+00,\n",
      "       -2.92792091e+01, -3.98636169e+01,  2.68717709e+01,  7.00320959e+00,\n",
      "       -1.88603153e+01, -8.70499229e+00, -1.59221115e+01, -7.39410925e+00,\n",
      "        7.91595459e+00, -1.09024086e+01, -4.44812536e-01, -7.43506241e+01,\n",
      "        1.15880280e+01, -1.53932123e+01, -1.23691082e+01,  6.70277405e+01,\n",
      "       -1.09761934e+01, -7.25710392e-02,  4.01266479e+00,  1.49866524e+01,\n",
      "       -1.21611691e+01, -3.10465317e+01,  1.70438747e+01, -6.67162895e-01,\n",
      "        7.39219284e+00,  1.26991768e+01, -2.53872490e+01,  1.59615870e+01,\n",
      "        2.14292884e-01,  3.68706703e+01], dtype=float32)>, <tf.Tensor: id=1297515, shape=(50, 1), dtype=float32, numpy=\n",
      "array([[-7.13479471e+00],\n",
      "       [-7.56419373e+01],\n",
      "       [-1.16403976e+02],\n",
      "       [-3.12340660e+01],\n",
      "       [-5.96703196e+00],\n",
      "       [-7.38699317e-01],\n",
      "       [-4.36680565e+01],\n",
      "       [-2.10505753e+01],\n",
      "       [-1.69695244e+01],\n",
      "       [-1.02372322e+02],\n",
      "       [-1.48235992e+02],\n",
      "       [-1.26966469e+02],\n",
      "       [-2.05217834e+02],\n",
      "       [-4.40250587e+00],\n",
      "       [-1.07174072e+01],\n",
      "       [-2.68551178e+01],\n",
      "       [-6.54312744e+01],\n",
      "       [-2.12657547e+01],\n",
      "       [-3.13378540e+02],\n",
      "       [-1.80038040e+02],\n",
      "       [-9.64757767e+01],\n",
      "       [-8.81575012e+01],\n",
      "       [-4.18296814e-01],\n",
      "       [-2.28111815e+00],\n",
      "       [-3.23818932e+01],\n",
      "       [-1.07397514e+02],\n",
      "       [-4.72549286e+01],\n",
      "       [-5.50899658e+01],\n",
      "       [-4.53958168e+01],\n",
      "       [-9.89042816e+01],\n",
      "       [-8.76804733e+00],\n",
      "       [ 1.24705315e+00],\n",
      "       [-2.57851429e+01],\n",
      "       [-8.04324627e+00],\n",
      "       [-8.16174984e+00],\n",
      "       [ 1.73094201e+00],\n",
      "       [-3.99730721e+01],\n",
      "       [-3.76379080e-02],\n",
      "       [-3.61587644e+00],\n",
      "       [-5.48277235e+00],\n",
      "       [-8.31438065e+01],\n",
      "       [ 4.80482638e-01],\n",
      "       [-1.54542184e+00],\n",
      "       [-2.95438061e+01],\n",
      "       [-4.01414185e+01],\n",
      "       [-2.42096596e+01],\n",
      "       [ 3.17577183e-01],\n",
      "       [-7.84071302e+00],\n",
      "       [-8.85646999e-01],\n",
      "       [-2.21656952e+01]], dtype=float32)>, <tf.Tensor: id=1297516, shape=(1,), dtype=float32, numpy=array([8.237289], dtype=float32)>] [<tf.Variable 'conv2d_39/kernel:0' shape=(3, 3, 1, 7) dtype=float32, numpy=\n",
      "array([[[[-0.06148246, -0.25348565,  0.06160801,  0.2316242 ,\n",
      "          -0.11438353,  0.11097969, -0.28617525]],\n",
      "\n",
      "        [[-0.27831057, -0.08598068, -0.22395664, -0.19025795,\n",
      "           0.06466947,  0.01061462,  0.27835402]],\n",
      "\n",
      "        [[-0.27064684, -0.01475344,  0.1664121 ,  0.20445968,\n",
      "           0.23563735,  0.14163108,  0.24075197]]],\n",
      "\n",
      "\n",
      "       [[[ 0.22431795, -0.2807528 , -0.0739259 ,  0.14587168,\n",
      "          -0.21868695,  0.2010643 ,  0.15579014]],\n",
      "\n",
      "        [[-0.15978229, -0.2633834 , -0.06331377, -0.03668042,\n",
      "           0.19331317, -0.04796064,  0.0786977 ]],\n",
      "\n",
      "        [[-0.08038697,  0.2100565 ,  0.27797028,  0.06276955,\n",
      "          -0.03210379, -0.14612833,  0.10308526]]],\n",
      "\n",
      "\n",
      "       [[[-0.01732848,  0.19229917, -0.05868924, -0.24140611,\n",
      "           0.23873092,  0.20174988,  0.08716352]],\n",
      "\n",
      "        [[-0.07050189, -0.285363  , -0.05074216,  0.01570971,\n",
      "           0.2422827 ,  0.03149058, -0.2711057 ]],\n",
      "\n",
      "        [[-0.18146954,  0.06838779,  0.06761365,  0.22819217,\n",
      "           0.0450858 , -0.07377751, -0.20355332]]]], dtype=float32)>, <tf.Variable 'conv2d_39/bias:0' shape=(7,) dtype=float32, numpy=\n",
      "array([-9.9999990e-05,  9.9999997e-05,  9.9999976e-05,  9.9999990e-05,\n",
      "       -9.9998811e-05, -9.9999997e-05, -9.9999997e-05], dtype=float32)>, <tf.Variable 'dense_117/kernel:0' shape=(5488, 50) dtype=float32, numpy=\n",
      "array([[-0.02094756,  0.00432868, -0.01817601, ...,  0.00750026,\n",
      "         0.02543942,  0.00803869],\n",
      "       [ 0.00720258, -0.01085855, -0.0240588 , ...,  0.0091123 ,\n",
      "         0.00232874, -0.01191843],\n",
      "       [-0.00423307,  0.02193928, -0.01589091, ...,  0.02467484,\n",
      "         0.00654379,  0.00583052],\n",
      "       ...,\n",
      "       [ 0.01957644,  0.03213769, -0.00451045, ..., -0.01364678,\n",
      "        -0.02343851,  0.02529909],\n",
      "       [-0.01221236,  0.01209053, -0.0191917 , ...,  0.01196332,\n",
      "         0.00067963, -0.02431464],\n",
      "       [-0.02562376,  0.01917642,  0.02493308, ..., -0.02273861,\n",
      "         0.01224998,  0.02815095]], dtype=float32)>, <tf.Variable 'dense_117/bias:0' shape=(50,) dtype=float32, numpy=\n",
      "array([-9.99999902e-05,  9.99999538e-05, -9.99913391e-05, -9.99999829e-05,\n",
      "        9.99999902e-05, -9.99999902e-05,  9.99999975e-05,  9.99998229e-05,\n",
      "        9.99999829e-05, -9.99997501e-05,  9.99999102e-05, -9.99999247e-05,\n",
      "        9.99999975e-05, -9.99999902e-05,  9.99998229e-05, -9.99999320e-05,\n",
      "       -9.99999975e-05, -9.99999829e-05, -9.99999465e-05, -9.99998956e-05,\n",
      "        9.99999902e-05,  9.99999902e-05, -9.99999975e-05, -9.99999684e-05,\n",
      "        9.99999975e-05,  9.99999756e-05,  9.99999829e-05,  9.99999684e-05,\n",
      "       -9.99999684e-05,  9.99999756e-05,  9.99992844e-05,  1.00000005e-04,\n",
      "       -9.99999829e-05,  9.99999902e-05,  9.99999756e-05, -1.00000005e-04,\n",
      "        9.99999902e-05,  9.99956537e-05, -9.99999247e-05, -9.99999902e-05,\n",
      "        9.99999829e-05,  9.99999902e-05, -9.99999829e-05,  9.99995245e-05,\n",
      "       -9.99999611e-05, -9.99999829e-05,  9.99999975e-05, -9.99999902e-05,\n",
      "       -9.99985277e-05, -9.99999975e-05], dtype=float32)>, <tf.Variable 'dense_118/kernel:0' shape=(50, 1) dtype=float32, numpy=\n",
      "array([[ 0.18821181],\n",
      "       [-0.19097596],\n",
      "       [ 0.01482965],\n",
      "       [ 0.2380599 ],\n",
      "       [ 0.30592954],\n",
      "       [ 0.28472388],\n",
      "       [ 0.17666031],\n",
      "       [-0.02604799],\n",
      "       [-0.18337072],\n",
      "       [-0.00704034],\n",
      "       [-0.21802531],\n",
      "       [ 0.2169195 ],\n",
      "       [ 0.18748017],\n",
      "       [ 0.15241306],\n",
      "       [ 0.02911411],\n",
      "       [-0.07698463],\n",
      "       [-0.3232353 ],\n",
      "       [-0.16544203],\n",
      "       [-0.30666077],\n",
      "       [-0.01332827],\n",
      "       [ 0.20097847],\n",
      "       [ 0.1869392 ],\n",
      "       [ 0.12149037],\n",
      "       [ 0.23995288],\n",
      "       [ 0.31846482],\n",
      "       [ 0.0508007 ],\n",
      "       [ 0.3264181 ],\n",
      "       [ 0.03910847],\n",
      "       [ 0.1203718 ],\n",
      "       [ 0.27023476],\n",
      "       [-0.01826291],\n",
      "       [-0.2996158 ],\n",
      "       [-0.09480372],\n",
      "       [ 0.33332568],\n",
      "       [ 0.29726285],\n",
      "       [ 0.27063262],\n",
      "       [ 0.07316954],\n",
      "       [ 0.04187352],\n",
      "       [ 0.0407948 ],\n",
      "       [ 0.21714546],\n",
      "       [ 0.08363535],\n",
      "       [-0.17065896],\n",
      "       [ 0.08029248],\n",
      "       [ 0.05446143],\n",
      "       [-0.3286832 ],\n",
      "       [ 0.11665   ],\n",
      "       [-0.15351722],\n",
      "       [-0.28899598],\n",
      "       [ 0.02721779],\n",
      "       [-0.28667206]], dtype=float32)>, <tf.Variable 'dense_118/bias:0' shape=(1,) dtype=float32, numpy=array([-9.9999976e-05], dtype=float32)>]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0330 17:01:41.513789 4738405824 optimizer_v2.py:928] Gradients does not exist for variables ['batch_normalization_v2_51/moving_mean:0', 'batch_normalization_v2_51/moving_variance:0', 'batch_normalization_v2_52/moving_mean:0', 'batch_normalization_v2_52/moving_variance:0', 'batch_normalization_v2_53/moving_mean:0', 'batch_normalization_v2_53/moving_variance:0'] when minimizing the loss.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<tf.Tensor: id=1298746, shape=(3, 3, 1, 7), dtype=float32, numpy=\n",
      "array([[[[ 28.677124  ,  92.41981   ,   1.6189471 ,  17.427876  ,\n",
      "          -10.61145   ,   3.7845078 ,  -6.064489  ]],\n",
      "\n",
      "        [[ 29.94526   ,  69.69804   ,  -3.1869977 ,  13.178066  ,\n",
      "          -11.060592  ,  28.091795  ,  -9.168077  ]],\n",
      "\n",
      "        [[ 24.380686  ,  75.52791   ,  -0.09488094,  -6.080202  ,\n",
      "           -5.835282  ,  24.694004  , -14.010462  ]]],\n",
      "\n",
      "\n",
      "       [[[ 67.881294  ,  86.086494  ,  -0.870136  ,  23.721085  ,\n",
      "          -15.359618  ,   3.8138459 ,  -4.290189  ]],\n",
      "\n",
      "        [[ 64.62344   ,  64.99681   ,  -5.464922  ,  19.456245  ,\n",
      "          -13.796463  ,  24.778337  , -12.546079  ]],\n",
      "\n",
      "        [[ 51.58476   ,  73.419624  ,  -3.021534  ,  -4.3196483 ,\n",
      "           -4.724845  ,  20.091139  ,  -9.837582  ]]],\n",
      "\n",
      "\n",
      "       [[[ 78.864426  ,  48.69242   ,  -4.6885557 ,  27.296192  ,\n",
      "           -5.329505  ,   7.307824  ,  -0.3058405 ]],\n",
      "\n",
      "        [[ 76.06731   ,  26.596073  ,  -8.912067  ,  26.187584  ,\n",
      "           -3.35701   ,  22.921734  ,  -5.952327  ]],\n",
      "\n",
      "        [[ 58.416103  ,  43.00389   ,  -3.5583448 ,   2.2689927 ,\n",
      "            2.1232605 ,  16.704075  ,  -0.8146487 ]]]], dtype=float32)>, <tf.Tensor: id=1298747, shape=(7,), dtype=float32, numpy=\n",
      "array([ 85.26224  ,   4.5316772,  90.662415 , 169.86105  ,  57.90445  ,\n",
      "       133.35382  , 161.8002   ], dtype=float32)>, <tf.Tensor: id=1298748, shape=(5488, 50), dtype=float32, numpy=\n",
      "array([[-8.2302122e+00,  1.2311309e+01, -1.2837486e+00, ...,\n",
      "         2.5644026e+00, -2.0450199e-01,  8.5638533e+00],\n",
      "       [-4.5189099e+00,  6.7650404e+00, -7.0517308e-01, ...,\n",
      "         1.4092730e+00, -1.1204633e-01,  4.7062845e+00],\n",
      "       [ 8.0323877e-04, -1.7155003e-04,  6.2022424e-05, ...,\n",
      "         0.0000000e+00,  6.6818087e-05,  0.0000000e+00],\n",
      "       ...,\n",
      "       [-1.2543093e+00,  1.8762473e+00, -1.9564600e-01, ...,\n",
      "         3.9081925e-01, -3.1161468e-02,  1.3051459e+00],\n",
      "       [ 3.7824780e-02, -6.6737556e-03,  2.9501757e-03, ...,\n",
      "         0.0000000e+00,  3.2107942e-03,  0.0000000e+00],\n",
      "       [ 1.0564815e-03, -4.3404120e-04,  8.3242645e-05, ...,\n",
      "         0.0000000e+00,  8.0906531e-05,  0.0000000e+00]], dtype=float32)>, <tf.Tensor: id=1298749, shape=(50,), dtype=float32, numpy=\n",
      "array([ 3.1308935e+01,  1.6735706e+01,  1.1455526e+00,  3.0226828e+01,\n",
      "       -2.4696617e+01,  6.4102005e+01, -2.9217213e+01,  2.4013782e-01,\n",
      "        7.4522347e+00, -5.3772271e-01,  3.1561251e+01,  1.7353943e+01,\n",
      "       -3.2183804e+01,  2.9179665e+01, -2.1125598e+00,  4.3910933e+00,\n",
      "        3.9072365e+01,  7.6314206e+00,  5.4365101e+01,  2.3628488e+00,\n",
      "       -1.2796417e+01,  1.2321724e+01,  2.8689087e+01,  5.2964672e+01,\n",
      "        2.9922588e+01, -7.8849578e+00,  3.3602776e+01, -6.2771573e+00,\n",
      "        1.2070679e+01,  2.1422260e+01,  2.8975770e-01,  4.1020215e-01,\n",
      "        5.1095862e+00, -1.7238401e+01, -2.0615950e+01,  6.7871666e+01,\n",
      "       -5.9436350e+00, -4.3846640e-01,  8.1390591e+00,  3.1044806e+01,\n",
      "        3.8879356e+00, -7.5430336e+00,  1.5540733e+01,  5.2141085e+00,\n",
      "        2.2097687e+01,  1.3013344e+01,  5.4346178e-02,  5.2117677e+00,\n",
      "        3.5305581e+00,  1.7404768e+01], dtype=float32)>, <tf.Tensor: id=1298750, shape=(50, 1), dtype=float32, numpy=\n",
      "array([[-1.11071920e+01],\n",
      "       [-3.64288788e+01],\n",
      "       [-1.06482620e+02],\n",
      "       [-3.61704979e+01],\n",
      "       [-1.37071457e+01],\n",
      "       [ 1.91141367e-01],\n",
      "       [-5.05535622e+01],\n",
      "       [-5.89974928e+00],\n",
      "       [-5.21840572e+00],\n",
      "       [-5.26112022e+01],\n",
      "       [-9.02118149e+01],\n",
      "       [-1.16244125e+02],\n",
      "       [-1.70056351e+02],\n",
      "       [-3.84051180e+00],\n",
      "       [-1.58576221e+01],\n",
      "       [-8.58382702e+00],\n",
      "       [-3.19159908e+01],\n",
      "       [-6.99106359e+00],\n",
      "       [-2.07846436e+02],\n",
      "       [-1.11288673e+02],\n",
      "       [-9.20276031e+01],\n",
      "       [-8.56107559e+01],\n",
      "       [ 3.03342342e-01],\n",
      "       [-2.30431294e+00],\n",
      "       [-3.96350937e+01],\n",
      "       [-1.01828873e+02],\n",
      "       [-4.88484421e+01],\n",
      "       [-5.84931946e+01],\n",
      "       [-4.31987801e+01],\n",
      "       [-8.55600739e+01],\n",
      "       [-2.24457693e+00],\n",
      "       [-1.04041703e-01],\n",
      "       [-9.68818188e+00],\n",
      "       [-1.03025236e+01],\n",
      "       [-1.28227377e+01],\n",
      "       [ 6.13292122e+00],\n",
      "       [-4.42550507e+01],\n",
      "       [-8.83795619e-01],\n",
      "       [-5.11098862e+00],\n",
      "       [-1.12382431e+01],\n",
      "       [-8.23868332e+01],\n",
      "       [ 1.11955218e-02],\n",
      "       [-5.84476185e+00],\n",
      "       [-3.53538094e+01],\n",
      "       [-1.80180817e+01],\n",
      "       [-3.27649307e+01],\n",
      "       [-8.64594150e-03],\n",
      "       [-2.00394797e+00],\n",
      "       [-1.67886519e+00],\n",
      "       [-7.63212919e+00]], dtype=float32)>, <tf.Tensor: id=1298751, shape=(1,), dtype=float32, numpy=array([77.952805], dtype=float32)>] [<tf.Variable 'conv2d_39/kernel:0' shape=(3, 3, 1, 7) dtype=float32, numpy=\n",
      "array([[[[-0.0614688 , -0.25358567,  0.06151658,  0.23152536,\n",
      "          -0.11428817,  0.11089417, -0.28607515]],\n",
      "\n",
      "        [[-0.27830115, -0.08607823, -0.22385886, -0.19035435,\n",
      "           0.06476752,  0.01051714,  0.27845415]],\n",
      "\n",
      "        [[-0.27063298, -0.01485108,  0.16634855,  0.20455848,\n",
      "           0.23573458,  0.14153224,  0.2408519 ]]],\n",
      "\n",
      "\n",
      "       [[[ 0.22424561, -0.28085235, -0.07391534,  0.14577292,\n",
      "          -0.21858683,  0.20097701,  0.15587391]],\n",
      "\n",
      "        [[-0.15985166, -0.2634789 , -0.06321431, -0.03677683,\n",
      "           0.19341245, -0.04805973,  0.07879779]],\n",
      "\n",
      "        [[-0.08044283,  0.2099591 ,  0.2780491 ,  0.06279789,\n",
      "          -0.032038  , -0.1462281 ,  0.10318536]]],\n",
      "\n",
      "\n",
      "       [[[-0.01741749,  0.19221346, -0.05859118, -0.24150465,\n",
      "           0.238794  ,  0.20164976,  0.08725659]],\n",
      "\n",
      "        [[-0.07059002, -0.2853832 , -0.05064205,  0.01561173,\n",
      "           0.24226569,  0.03139066, -0.27100596]],\n",
      "\n",
      "        [[-0.18155205,  0.06831378,  0.06769922,  0.22810529,\n",
      "           0.04499602, -0.07387755, -0.2034663 ]]]], dtype=float32)>, <tf.Variable 'conv2d_39/bias:0' shape=(7,) dtype=float32, numpy=\n",
      "array([-1.9364007e-04,  1.6427986e-04,  3.4001765e-05,  3.7056074e-05,\n",
      "       -1.7471648e-04, -2.0004975e-04, -1.9683503e-04], dtype=float32)>, <tf.Variable 'dense_117/kernel:0' shape=(5488, 50) dtype=float32, numpy=\n",
      "array([[-0.02084781,  0.00423254, -0.01807771, ...,  0.00741346,\n",
      "         0.02553657,  0.00794633],\n",
      "       [ 0.00730233, -0.0109547 , -0.0239605 , ...,  0.00902549,\n",
      "         0.00242591, -0.0120108 ],\n",
      "       [-0.0043169 ,  0.02203768, -0.01597115, ...,  0.02467484,\n",
      "         0.00647274,  0.00583052],\n",
      "       ...,\n",
      "       [ 0.01967621,  0.03204162, -0.00441222, ..., -0.01373349,\n",
      "        -0.0233413 ,  0.02520682],\n",
      "       [-0.0123123 ,  0.01216917, -0.01929167, ...,  0.01196332,\n",
      "         0.00059681, -0.02431464],\n",
      "       [-0.02571387,  0.0192546 ,  0.02484352, ..., -0.02273861,\n",
      "         0.01217837,  0.02815095]], dtype=float32)>, <tf.Variable 'dense_117/bias:0' shape=(50,) dtype=float32, numpy=\n",
      "array([-1.9963327e-04,  5.8554815e-05, -1.7649567e-04, -1.9962165e-04,\n",
      "        1.9887979e-04, -1.9932684e-04,  1.9930865e-04,  1.5628006e-04,\n",
      "        1.2800860e-04, -1.3320257e-04,  3.2143427e-05, -1.8672623e-04,\n",
      "        1.9871480e-04, -1.9992189e-04,  1.9999623e-04, -1.9969646e-04,\n",
      "       -1.9840671e-04, -1.9115140e-04, -1.8156861e-04, -1.9976482e-04,\n",
      "        1.9120585e-04,  1.4202922e-04, -2.0011660e-04, -1.8255092e-04,\n",
      "        7.2755131e-05,  1.9962029e-04,  6.1427287e-05,  1.9924296e-04,\n",
      "       -1.9896790e-04,  6.4053864e-05,  1.1550416e-04,  1.6659385e-04,\n",
      "       -1.9134016e-04,  2.0013445e-04,  1.9827849e-04, -2.0003031e-04,\n",
      "        1.9436207e-04,  1.8434669e-04, -1.9636680e-04, -1.9613790e-04,\n",
      "        1.4114984e-04,  1.8268620e-04, -1.9965316e-04,  3.4687393e-05,\n",
      "       -1.9182055e-04, -2.0005585e-04,  1.6684606e-04, -1.8680078e-04,\n",
      "       -1.7833285e-04, -1.9236672e-04], dtype=float32)>, <tf.Variable 'dense_118/kernel:0' shape=(50, 1) dtype=float32, numpy=\n",
      "array([[ 0.18831064],\n",
      "       [-0.1908833 ],\n",
      "       [ 0.01492932],\n",
      "       [ 0.23816   ],\n",
      "       [ 0.30602452],\n",
      "       [ 0.2847701 ],\n",
      "       [ 0.17676044],\n",
      "       [-0.02596338],\n",
      "       [-0.1832848 ],\n",
      "       [-0.00694672],\n",
      "       [-0.21792938],\n",
      "       [ 0.21701917],\n",
      "       [ 0.18757924],\n",
      "       [ 0.15251248],\n",
      "       [ 0.02921328],\n",
      "       [-0.07689814],\n",
      "       [-0.32314244],\n",
      "       [-0.16535513],\n",
      "       [-0.3065638 ],\n",
      "       [-0.01323214],\n",
      "       [ 0.20107833],\n",
      "       [ 0.1870391 ],\n",
      "       [ 0.12150091],\n",
      "       [ 0.24005291],\n",
      "       [ 0.31856483],\n",
      "       [ 0.05090052],\n",
      "       [ 0.32651818],\n",
      "       [ 0.03920858],\n",
      "       [ 0.12047164],\n",
      "       [ 0.27033412],\n",
      "       [-0.01817954],\n",
      "       [-0.2996764 ],\n",
      "       [-0.09471481],\n",
      "       [ 0.33342558],\n",
      "       [ 0.2973616 ],\n",
      "       [ 0.2705428 ],\n",
      "       [ 0.07326968],\n",
      "       [ 0.04195071],\n",
      "       [ 0.04089425],\n",
      "       [ 0.2172417 ],\n",
      "       [ 0.08373532],\n",
      "       [-0.17072769],\n",
      "       [ 0.08038154],\n",
      "       [ 0.0545615 ],\n",
      "       [-0.3285916 ],\n",
      "       [ 0.11674967],\n",
      "       [-0.15358217],\n",
      "       [-0.28891262],\n",
      "       [ 0.02731486],\n",
      "       [-0.28658447]], dtype=float32)>, <tf.Variable 'dense_118/bias:0' shape=(1,) dtype=float32, numpy=array([-0.00018104], dtype=float32)>]\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-306-1deccc917c0f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdiscriminator_optimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgenerator_optimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-305-b50b4c0bdfbb>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mdisc_grad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdisc_tape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdisc_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdiscriminator_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m             \u001b[0mgen_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_generator_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfake_predictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m             \u001b[0mgen_grad\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgen_tape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgen_loss\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m             \u001b[0mdiscriminator_optimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdisc_grad\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdiscriminator_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m             \u001b[0mgenerator_optimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_gradients\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgen_grad\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py\u001b[0m in \u001b[0;36mgradient\u001b[0;34m(self, target, sources, output_gradients, unconnected_gradients)\u001b[0m\n\u001b[1;32m    954\u001b[0m         \u001b[0mflat_sources\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    955\u001b[0m         \u001b[0moutput_gradients\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_gradients\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 956\u001b[0;31m         unconnected_gradients=unconnected_gradients)\n\u001b[0m\u001b[1;32m    957\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    958\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_persistent\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/eager/imperative_grad.py\u001b[0m in \u001b[0;36mimperative_grad\u001b[0;34m(tape, target, sources, output_gradients, unconnected_gradients)\u001b[0m\n\u001b[1;32m     70\u001b[0m       \u001b[0msources\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m       \u001b[0moutput_gradients\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m       compat.as_str(unconnected_gradients.value))\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py\u001b[0m in \u001b[0;36m_gradient_function\u001b[0;34m(op_name, attr_tuple, num_inputs, inputs, outputs, out_grads)\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnum_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mgrad_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmock_op\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mout_grads\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/nn_grad.py\u001b[0m in \u001b[0;36m_Conv2DBackpropInputGrad\u001b[0;34m(op, grad)\u001b[0m\n\u001b[1;32m     59\u001b[0m           \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_attr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"padding\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m           \u001b[0muse_cudnn_on_gpu\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_attr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"use_cudnn_on_gpu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m           data_format=op.get_attr(\"data_format\").decode())\n\u001b[0m\u001b[1;32m     62\u001b[0m   ]\n\u001b[1;32m     63\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/nn_ops.py\u001b[0m in \u001b[0;36mconv2d\u001b[0;34m(input, filter, strides, padding, use_cudnn_on_gpu, data_format, dilations, name, filters)\u001b[0m\n\u001b[1;32m   1949\u001b[0m                            \u001b[0mdata_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1950\u001b[0m                            \u001b[0mdilations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdilations\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1951\u001b[0;31m                            name=name)\n\u001b[0m\u001b[1;32m   1952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_nn_ops.py\u001b[0m in \u001b[0;36mconv2d\u001b[0;34m(input, filter, strides, padding, use_cudnn_on_gpu, explicit_paddings, data_format, dilations, name)\u001b[0m\n\u001b[1;32m   1022\u001b[0m         \u001b[0mstrides\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"use_cudnn_on_gpu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_cudnn_on_gpu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"padding\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1023\u001b[0m         \u001b[0;34m\"explicit_paddings\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexplicit_paddings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"data_format\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_format\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1024\u001b[0;31m         \"dilations\", dilations)\n\u001b[0m\u001b[1;32m   1025\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1026\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "generator = make_generator_model()\n",
    "discriminator_model = make_discriminator_model()\n",
    "discriminator_optimizer = tf.optimizers.Adam(1e-4)\n",
    "generator_optimizer = tf.optimizers.Adam(1e-4)\n",
    "train();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x138b85710>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(generator(np.random.rand(1,100)).numpy().reshape(28,28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<tf.Variable 'conv2d_39/kernel:0' shape=(3, 3, 1, 7) dtype=float32, numpy=\n",
       " array([[[[-0.0614688 , -0.25358567,  0.06151658,  0.23152536,\n",
       "           -0.11428817,  0.11089417, -0.28607515]],\n",
       " \n",
       "         [[-0.27830115, -0.08607823, -0.22385886, -0.19035435,\n",
       "            0.06476752,  0.01051714,  0.27845415]],\n",
       " \n",
       "         [[-0.27063298, -0.01485108,  0.16634855,  0.20455848,\n",
       "            0.23573458,  0.14153224,  0.2408519 ]]],\n",
       " \n",
       " \n",
       "        [[[ 0.22424561, -0.28085235, -0.07391534,  0.14577292,\n",
       "           -0.21858683,  0.20097701,  0.15587391]],\n",
       " \n",
       "         [[-0.15985166, -0.2634789 , -0.06321431, -0.03677683,\n",
       "            0.19341245, -0.04805973,  0.07879779]],\n",
       " \n",
       "         [[-0.08044283,  0.2099591 ,  0.2780491 ,  0.06279789,\n",
       "           -0.032038  , -0.1462281 ,  0.10318536]]],\n",
       " \n",
       " \n",
       "        [[[-0.01741749,  0.19221346, -0.05859118, -0.24150465,\n",
       "            0.238794  ,  0.20164976,  0.08725659]],\n",
       " \n",
       "         [[-0.07059002, -0.2853832 , -0.05064205,  0.01561173,\n",
       "            0.24226569,  0.03139066, -0.27100596]],\n",
       " \n",
       "         [[-0.18155205,  0.06831378,  0.06769922,  0.22810529,\n",
       "            0.04499602, -0.07387755, -0.2034663 ]]]], dtype=float32)>,\n",
       " <tf.Variable 'conv2d_39/bias:0' shape=(7,) dtype=float32, numpy=\n",
       " array([-1.9364007e-04,  1.6427986e-04,  3.4001765e-05,  3.7056074e-05,\n",
       "        -1.7471648e-04, -2.0004975e-04, -1.9683503e-04], dtype=float32)>,\n",
       " <tf.Variable 'dense_117/kernel:0' shape=(5488, 50) dtype=float32, numpy=\n",
       " array([[-0.02084781,  0.00423254, -0.01807771, ...,  0.00741346,\n",
       "          0.02553657,  0.00794633],\n",
       "        [ 0.00730233, -0.0109547 , -0.0239605 , ...,  0.00902549,\n",
       "          0.00242591, -0.0120108 ],\n",
       "        [-0.0043169 ,  0.02203768, -0.01597115, ...,  0.02467484,\n",
       "          0.00647274,  0.00583052],\n",
       "        ...,\n",
       "        [ 0.01967621,  0.03204162, -0.00441222, ..., -0.01373349,\n",
       "         -0.0233413 ,  0.02520682],\n",
       "        [-0.0123123 ,  0.01216917, -0.01929167, ...,  0.01196332,\n",
       "          0.00059681, -0.02431464],\n",
       "        [-0.02571387,  0.0192546 ,  0.02484352, ..., -0.02273861,\n",
       "          0.01217837,  0.02815095]], dtype=float32)>,\n",
       " <tf.Variable 'dense_117/bias:0' shape=(50,) dtype=float32, numpy=\n",
       " array([-1.9963327e-04,  5.8554815e-05, -1.7649567e-04, -1.9962165e-04,\n",
       "         1.9887979e-04, -1.9932684e-04,  1.9930865e-04,  1.5628006e-04,\n",
       "         1.2800860e-04, -1.3320257e-04,  3.2143427e-05, -1.8672623e-04,\n",
       "         1.9871480e-04, -1.9992189e-04,  1.9999623e-04, -1.9969646e-04,\n",
       "        -1.9840671e-04, -1.9115140e-04, -1.8156861e-04, -1.9976482e-04,\n",
       "         1.9120585e-04,  1.4202922e-04, -2.0011660e-04, -1.8255092e-04,\n",
       "         7.2755131e-05,  1.9962029e-04,  6.1427287e-05,  1.9924296e-04,\n",
       "        -1.9896790e-04,  6.4053864e-05,  1.1550416e-04,  1.6659385e-04,\n",
       "        -1.9134016e-04,  2.0013445e-04,  1.9827849e-04, -2.0003031e-04,\n",
       "         1.9436207e-04,  1.8434669e-04, -1.9636680e-04, -1.9613790e-04,\n",
       "         1.4114984e-04,  1.8268620e-04, -1.9965316e-04,  3.4687393e-05,\n",
       "        -1.9182055e-04, -2.0005585e-04,  1.6684606e-04, -1.8680078e-04,\n",
       "        -1.7833285e-04, -1.9236672e-04], dtype=float32)>,\n",
       " <tf.Variable 'dense_118/kernel:0' shape=(50, 1) dtype=float32, numpy=\n",
       " array([[ 0.18831064],\n",
       "        [-0.1908833 ],\n",
       "        [ 0.01492932],\n",
       "        [ 0.23816   ],\n",
       "        [ 0.30602452],\n",
       "        [ 0.2847701 ],\n",
       "        [ 0.17676044],\n",
       "        [-0.02596338],\n",
       "        [-0.1832848 ],\n",
       "        [-0.00694672],\n",
       "        [-0.21792938],\n",
       "        [ 0.21701917],\n",
       "        [ 0.18757924],\n",
       "        [ 0.15251248],\n",
       "        [ 0.02921328],\n",
       "        [-0.07689814],\n",
       "        [-0.32314244],\n",
       "        [-0.16535513],\n",
       "        [-0.3065638 ],\n",
       "        [-0.01323214],\n",
       "        [ 0.20107833],\n",
       "        [ 0.1870391 ],\n",
       "        [ 0.12150091],\n",
       "        [ 0.24005291],\n",
       "        [ 0.31856483],\n",
       "        [ 0.05090052],\n",
       "        [ 0.32651818],\n",
       "        [ 0.03920858],\n",
       "        [ 0.12047164],\n",
       "        [ 0.27033412],\n",
       "        [-0.01817954],\n",
       "        [-0.2996764 ],\n",
       "        [-0.09471481],\n",
       "        [ 0.33342558],\n",
       "        [ 0.2973616 ],\n",
       "        [ 0.2705428 ],\n",
       "        [ 0.07326968],\n",
       "        [ 0.04195071],\n",
       "        [ 0.04089425],\n",
       "        [ 0.2172417 ],\n",
       "        [ 0.08373532],\n",
       "        [-0.17072769],\n",
       "        [ 0.08038154],\n",
       "        [ 0.0545615 ],\n",
       "        [-0.3285916 ],\n",
       "        [ 0.11674967],\n",
       "        [-0.15358217],\n",
       "        [-0.28891262],\n",
       "        [ 0.02731486],\n",
       "        [-0.28658447]], dtype=float32)>,\n",
       " <tf.Variable 'dense_118/bias:0' shape=(1,) dtype=float32, numpy=array([-0.00018104], dtype=float32)>]"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "discriminator_model.variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TensorShape([500, 28, 28])"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images_samples.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x13a9f2ba8>"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(train_images_samples[0].numpy().reshape((28,28)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: id=757770, shape=(500, 1), dtype=float32, numpy=\n",
       "array([[-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.144735 ],\n",
       "       [-6.1447353],\n",
       "       [-6.144736 ]], dtype=float32)>"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images_samples = tf.reshape(train_images_samples,(500,28,28,1))\n",
    "train_images_samples = (tf.cast(train_images_samples,dtype=tf.dtypes.float32)-127.5)/127.5\n",
    "discriminator_model(train_images_samples)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}